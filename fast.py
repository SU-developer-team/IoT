import os
import requests
from bs4 import BeautifulSoup
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from threading import Thread
from concurrent.futures import ThreadPoolExecutor, as_completed
import multiprocessing
import pandas as pd
import csv
import logging
import random

BASE_URL = "http://205.174.165.80/IOTDataset/CIC_IOT_Dataset2023/Dataset/CSV/CSV/"
SAVE_DIR = "downloads"
os.makedirs(SAVE_DIR, exist_ok=True)

LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

logger = logging.getLogger("processing_logger")
logger.setLevel(logging.DEBUG)
fh = logging.FileHandler(os.path.join(LOG_DIR, "processing.log"), mode="w", encoding="utf-8")
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
fh.setFormatter(formatter)
logger.addHandler(fh)

def get_links(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, "html.parser")
    return [a["href"] for a in soup.find_all("a", href=True)]

def download_file(file_url, file_path):
    if os.path.exists(file_path):
        print(f"üîµ –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {file_path}")
        return
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    try:
        with requests.get(file_url, stream=True) as r:
            r.raise_for_status()
            with open(file_path, "wb") as f:
                for chunk in r.iter_content(chunk_size=8192):
                    f.write(chunk)
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω: {file_path}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_url}: {e}")

def collect_csv_files(remote_url, local_subpath):
    files = []
    items = get_links(remote_url)
    for item in items:
        if item.endswith('/'):
            new_remote = remote_url + item
            new_local = os.path.join(local_subpath, item.rstrip('/'))
            files.extend(collect_csv_files(new_remote, new_local))
        elif item.endswith('.csv'):
            remote_file = remote_url + item
            local_file = os.path.join(local_subpath, item)
            files.append((remote_file, local_file))
    return files

# ------------------------------------------------
# DownloadFrame (—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ) - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ------------------------------------------------
class DownloadFrame(ttk.Frame):
    def __init__(self, master, all_folders):
        super().__init__(master, padding=10)
        self.all_folders = all_folders
        self.folder_vars = {}
        self.create_widgets()

    def create_widgets(self):
        style = ttk.Style(self)
        style.configure("TFrame", background="#121212")
        style.configure("TLabel", background="#121212", foreground="cyan", font=("Courier", 12))
        style.configure("TCheckbutton", background="#121212", foreground="cyan", font=("Courier", 11))
        style.configure("TButton", background="black", foreground="white", font=("Courier", 12, "bold"))
        style.map("TButton",
                  background=[("active", "#2d2d2d")],
                  foreground=[("active", "white")])
        style.configure("Horizontal.TProgressbar",
                        troughcolor="black",
                        bordercolor="black",
                        background="cyan",
                        lightcolor="cyan",
                        darkcolor="cyan")
        style.configure("Vertical.TScrollbar", troughcolor="#1E1E1E", background="#333333")

        title_label = ttk.Label(self, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", font=("Courier", 14, "bold"))
        title_label.pack(pady=5)

        self.status_label = ttk.Label(self, text=f"–î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–ø–æ–∫: {len(self.all_folders)} | –í—ã–±—Ä–∞–Ω–æ: 0")
        self.status_label.pack(pady=5)

        checkboxes_frame = ttk.Frame(self)
        checkboxes_frame.pack(fill="both", expand=True, pady=5)

        canvas_bg_color = "#1E1E1E"
        self.canvas = tk.Canvas(checkboxes_frame, bg=canvas_bg_color, highlightthickness=0)
        self.scrollbar = ttk.Scrollbar(checkboxes_frame, orient="vertical",
                                       command=self.canvas.yview, style="Vertical.TScrollbar")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)
        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")

        scrollable_frame = ttk.Frame(self.canvas, style="TFrame")
        self.canvas_window = self.canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")

        def on_frame_configure(event):
            self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        scrollable_frame.bind("<Configure>", on_frame_configure)

        for folder in self.all_folders:
            var = tk.BooleanVar()
            cb = ttk.Checkbutton(scrollable_frame, text=folder, variable=var, command=self.update_count)
            cb.pack(anchor="w")
            self.folder_vars[folder] = var

        self.progress_bar = ttk.Progressbar(self, mode="determinate", length=400, style="Horizontal.TProgressbar")
        self.progress_bar.pack(pady=5)

        self.progress_label = ttk.Label(self, text="–ü—Ä–æ–≥—Ä–µ—Å—Å: 0/0 (0%)")
        self.progress_label.pack(pady=5)

        download_btn = ttk.Button(self, text="–°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", command=self.start_download)
        download_btn.pack(pady=5)

    def update_count(self):
        selected_count = sum(var.get() for var in self.folder_vars.values())
        self.status_label.config(text=f"–î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–ø–æ–∫: {len(self.all_folders)} | –í—ã–±—Ä–∞–Ω–æ: {selected_count}")

    def start_download(self):
        selected_folders = [folder for folder, var in self.folder_vars.items() if var.get()]
        if not selected_folders:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!", parent=self)
            return
        messagebox.showinfo("–ó–∞–≥—Ä—É–∑–∫–∞",
                            f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ {len(selected_folders)} –ø–∞–ø–æ–∫ –Ω–∞—á–∞–ª–æ—Å—å.\n"
                            "–°–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",
                            parent=self)
        thread = Thread(target=self.download_thread, args=(selected_folders,), daemon=True)
        thread.start()

    def download_thread(self, selected_folders):
        all_files = []
        for folder in selected_folders:
            remote_url = BASE_URL + folder
            local_subpath = os.path.join(SAVE_DIR, folder.rstrip('/'))
            files_in_folder = collect_csv_files(remote_url, local_subpath)
            all_files.extend(files_in_folder)

        total_files = len(all_files)
        if total_files == 0:
            self.after(0, lambda: messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç",
                                                      "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ CSV-—Ñ–∞–π–ª–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö.",
                                                      parent=self))
            return
        
        def update_progress(i):
            percent = int((i / total_files) * 100)
            self.progress_bar["value"] = i
            self.progress_label.config(text=f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total_files} ({percent}%)")

        self.after(0, lambda: self.progress_bar.config(value=0, maximum=total_files))
        self.after(0, lambda: self.progress_label.config(text=f"–ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{total_files} (0%)"))

        completed_count = 0
        with ThreadPoolExecutor(max_workers=5) as executor:
            future_to_file = {
                executor.submit(download_file, file_url, file_path): (file_url, file_path)
                for file_url, file_path in all_files
            }
            for future in as_completed(future_to_file):
                completed_count += 1
                self.after(0, lambda c=completed_count: update_progress(c))

        def finish_message():
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ!", "–í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!", parent=self)
            self.status_label.config(text="–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        self.after(0, finish_message)


# ----------------------------------------------------------
#   –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–î–ï–õ–¨–ù–û–ì–û –§–ê–ô–õ–ê
# ----------------------------------------------------------
def process_file(
    fpath: str,
    remove_incomplete: bool,
    remove_dup: bool
):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ (multiprocessing).
    –ü–æ—Å—Ç—Ä–æ—á–Ω–æ —á–∏—Ç–∞–µ—Ç –æ–¥–∏–Ω CSV-—Ñ–∞–π–ª:
      - –µ—Å–ª–∏ remove_incomplete=True -> –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏
      - –µ—Å–ª–∏ remove_dup=True -> –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ
    –õ–æ–≥–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π –ø—Ä–æ–ø—É—Å–∫ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂:
       (rows, incomplete_count, duplicates_count, header)
    –≥–¥–µ:
       rows = —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
       incomplete_count = —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ –ø—Ä–∏—á–∏–Ω–µ –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π
       duplicates_count = —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–æ –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç—ã
       header = –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∞–π–ª–∞
    """
    rows = []
    seen = set()
    incomplete_count = 0
    duplicates_count = 0
    header = None

    try:
        with open(fpath, "r", encoding="utf-8", newline="") as f:
            reader = csv.reader(f)
            row_index = 0
            for row in reader:
                row_index += 1
                # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if row_index == 1:
                    header = row
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
                if remove_incomplete and any(col.strip() == "" for col in row):
                    logger.info(f"[–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞] File='{fpath}', Line={row_index}, Data={row}")
                    incomplete_count += 1
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
                row_tuple = tuple(row)
                if remove_dup and (row_tuple in seen):
                    logger.info(f"[–î—É–±–ª–∏–∫–∞—Ç] File='{fpath}', Line={row_index}, Data={row}")
                    duplicates_count += 1
                    continue

                rows.append(row)
                if remove_dup:
                    seen.add(row_tuple)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {fpath}: {e}")

    return rows, incomplete_count, duplicates_count, header


# --------------------------------------------------------------------------
#           NormalizeFrame: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ö–ê–ñ–î–û–ì–û —Ñ–∞–π–ª–∞
# --------------------------------------------------------------------------
class NormalizeFrame(ttk.Frame):
    def __init__(self, master):
        super().__init__(master, padding=10)

        self.file_list = []
        self.var_total_lines = tk.StringVar(value="1000000")
        self.var_label = tk.StringVar(value="")
        self.var_shuffle = tk.BooleanVar(value=False)
        self.var_remove_dup = tk.BooleanVar(value=False)
        self.var_remove_incomplete = tk.BooleanVar(value=False)

        self.create_widgets()

    def create_widgets(self):
        style = ttk.Style(self)
        style.configure("TFrame", background="#121212")
        style.configure("TLabel", background="#121212", foreground="cyan", font=("Courier", 12))
        style.configure("TCheckbutton", background="#121212", foreground="cyan", font=("Courier", 11))
        style.configure("TButton", background="black", foreground="white", font=("Courier", 12, "bold"))
        style.map("TButton",
                  background=[("active", "#2d2d2d")],
                  foreground=[("active", "white")])
        style.configure("Vertical.TScrollbar", troughcolor="#1E1E1E", background="#333333")

        lbl_title = ttk.Label(self, text="–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å (–æ–±—ä–µ–¥–∏–Ω–∏—Ç—å) CSV-—Ñ–∞–π–ª—ã (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)", font=("Courier", 14, "bold"))
        lbl_title.pack(pady=5)

        top_frame = ttk.Frame(self)
        top_frame.pack(fill="x")

        btn_add = ttk.Button(top_frame, text="–î–æ–±–∞–≤–∏—Ç—å CSV-—Ñ–∞–π–ª—ã", command=self.add_files)
        btn_add.pack(side="left", padx=5, pady=5)

        btn_clear = ttk.Button(top_frame, text="–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", command=self.clear_file_list)
        btn_clear.pack(side="left", padx=5, pady=5)

        self.listbox = tk.Listbox(self, bg="#333333", fg="cyan", selectbackground="#2d2d2d", height=10)
        self.listbox.pack(fill="both", expand=True, padx=5, pady=5)

        params_frame = ttk.Frame(self)
        params_frame.pack(fill="x", pady=5)

        lbl_total_lines = ttk.Label(params_frame, text="–ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ (–ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏):")
        lbl_total_lines.grid(row=0, column=0, sticky="w", padx=5)
        entry_total_lines = ttk.Entry(params_frame, textvariable=self.var_total_lines, width=12)
        entry_total_lines.grid(row=0, column=1, sticky="w", padx=5)

        lbl_label = ttk.Label(params_frame, text="–ú–µ—Ç–∫–∞ (label):")
        lbl_label.grid(row=1, column=0, sticky="w", padx=5)
        entry_label = ttk.Entry(params_frame, textvariable=self.var_label, width=12)
        entry_label.grid(row=1, column=1, sticky="w", padx=5)

        chk_shuffle = ttk.Checkbutton(params_frame, text="–°–º–µ—à–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ (Random Shuffle)", variable=self.var_shuffle)
        chk_shuffle.grid(row=2, column=0, columnspan=2, sticky="w", padx=5, pady=3)

        chk_dup = ttk.Checkbutton(params_frame, text="–£–¥–∞–ª—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã (–º–µ–∂–¥—É –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏)", variable=self.var_remove_dup)
        chk_dup.grid(row=3, column=0, columnspan=2, sticky="w", padx=5, pady=3)

        chk_inc = ttk.Checkbutton(params_frame, text="–£–¥–∞–ª—è—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–ø—É—Å—Ç—ã–µ –ø–æ–ª—è)",
                                  variable=self.var_remove_incomplete)
        chk_inc.grid(row=4, column=0, columnspan=2, sticky="w", padx=5, pady=3)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å (–ø–æ –∫–æ–ª-–≤—É –§–ê–ô–õ–û–í)
        self.progress_bar = ttk.Progressbar(self, mode="determinate", length=400, style="Horizontal.TProgressbar")
        self.progress_bar.pack(pady=5)
        self.progress_label = ttk.Label(self, text="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤: 0/0")
        self.progress_label.pack(pady=5)

        merge_btn = ttk.Button(self, text="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.start_normalize)
        merge_btn.pack(pady=5, anchor="e")

    def add_files(self):
        file_paths = filedialog.askopenfilenames(
            title="–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª—ã",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        if file_paths:
            for f in file_paths:
                if f not in self.file_list:
                    self.file_list.append(f)
                    self.listbox.insert("end", f)

    def clear_file_list(self):
        self.file_list.clear()
        self.listbox.delete(0, "end")

    def start_normalize(self):
        if not self.file_list:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω CSV-—Ñ–∞–π–ª!", parent=self)
            return
        
        out_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π CSV",
            defaultextension=".csv",
            filetypes=[("CSV File", "*.csv"), ("All Files", "*.*")]
        )
        if not out_path:
            return

        try:
            total_needed = int(self.var_total_lines.get())
            if total_needed < 1:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ß–∏—Å–ª–æ –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0!", parent=self)
                return
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫!", parent=self)
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã GUI –Ω–µ –∑–∞–≤–∏—Å
        thread = Thread(target=self.normalize_thread, args=(out_path, total_needed), daemon=True)
        thread.start()

    def normalize_thread(self, out_path, total_needed):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª (process_file),
        –ø–æ—Ç–æ–º —Å–ª–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ï—Å–ª–∏ do_remove_dup=True, —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        –∏ –ú–ï–ñ–î–£ —Ñ–∞–π–ª–∞–º–∏. 
        """
        do_shuffle = self.var_shuffle.get()
        do_remove_dup = self.var_remove_dup.get()
        do_remove_incomplete = self.var_remove_incomplete.get()
        label_value = self.var_label.get().strip()

        n_files = len(self.file_list)
        self.set_progress(0, n_files)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–ª –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ –∫–æ–ª-–≤–æ CPU, –ª–∏–±–æ –∑–∞—à–∏—Ç—å 4 –∏ —Ç.–¥.)
        # –í –∫–∞–∂–¥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–∑–æ–≤–µ–º process_file(...)
        results = []
        def update_file_progress(idx):
            self.set_progress(idx, n_files)

        try:
            with multiprocessing.Pool() as pool:
                # starmap_async —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                async_result = pool.starmap_async(
                    process_file,
                    [(fpath, do_remove_incomplete, do_remove_dup) for fpath in self.file_list]
                )

                # –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –º–æ–∂–µ–º —Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                # –ù–æ starmap_async –¥–∞—ë—Ç –Ω–∞–º –≤—Å—ë —Ä–∞–∑–æ–º, –±–µ–∑ "chunk-wise" –∫–æ–ª–±—ç–∫–æ–≤.
                # –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –¥–æ–∂–¥—ë–º—Å—è .get() –∏ —Ç–æ–≥–¥–∞ –æ–±–Ω–æ–≤–∏–º progress
                final_list = async_result.get()

            # final_list = [ (rows, inc_count, dup_count, header), ... ] –ø–æ –∫–∞–∂–¥–æ–º—É —Ñ–∞–π–ª—É
            # –û–±–Ω–æ–≤–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å: –≤—Å–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã
            self.set_progress(n_files, n_files)

            results = final_list
        except Exception as e:
            msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}"
            logger.error(msg)
            self.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", msg, parent=self))
            return

        # –¢–µ–ø–µ—Ä—å –æ–±—ä–µ–¥–∏–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_rows = []
        total_incomplete = 0
        total_duplicates_local = 0
        headers = []  # —Å–æ–±–µ—Ä—ë–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ä–∞–∑–Ω—ã–µ)
        for i, (rows, inc_count, dup_count, header) in enumerate(results, start=1):
            if header:
                headers.append(header)
            total_incomplete += inc_count
            total_duplicates_local += dup_count
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏
            all_rows.extend(rows)

        # –í—ã–±–µ—Ä–µ–º "–ø–µ—Ä–≤—ã–π" –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
        main_header = headers[0] if headers else None

        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ remove_dup => –Ω—É–∂–Ω–æ –µ—â—ë —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ú–ï–ñ–î–£ —Ñ–∞–π–ª–∞–º–∏
        total_duplicates_global = 0
        if do_remove_dup:
            # –≥–ª–æ–±–∞–ª—å–Ω—ã–π set
            global_seen = set()
            unique_rows = []
            for row in all_rows:
                rt = tuple(row)
                if rt in global_seen:
                    total_duplicates_global += 1
                    continue
                unique_rows.append(row)
                global_seen.add(rt)
            all_rows = unique_rows

        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫
        if len(all_rows) > total_needed:
            all_rows = random.sample(all_rows, total_needed)

        # –ü–µ—Ä–µ–º–µ—à–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if do_shuffle:
            random.shuffle(all_rows)

        # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ—Ç, –ø—Ä–∏–¥—É–º–∞–µ–º
        if not main_header and all_rows:
            col_count = len(all_rows[0])
            main_header = [f"col{i+1}" for i in range(col_count)]
        elif not main_header:
            # –°–æ–≤—Å–µ–º –ø—É—Å—Ç–æ
            main_header = []

        # –°–æ–±–∏—Ä–∞–µ–º DataFrame
        if not all_rows:
            msg = "–í –∏—Ç–æ–≥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–≤—Å–µ —É–¥–∞–ª–µ–Ω—ã?)."
            self.after(0, lambda: messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", msg, parent=self))
            return

        df = pd.DataFrame(all_rows, columns=main_header)

        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –º–µ—Ç–∫–∞
        if label_value:
            df["label"] = label_value

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        try:
            df.to_csv(out_path, index=False)
        except Exception as e:
            msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª: {e}"
            logger.error(msg)
            self.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", msg, parent=self))
            return

        final_count = len(df)
        file_name = f"logs/{out_path.split('/')[-1].replace('.csv', '')}.log"
        msg = (
            f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {out_path}\n"
            f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(self.file_list)}\n\n"
            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (–ø–æ —Ñ–∞–π–ª–∞–º): {total_incomplete}\n"
            f"–î—É–±–ª–∏–∫–∞—Ç–æ–≤ (–≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–æ–≤): {total_duplicates_local}\n"
            f"–î—É–±–ª–∏–∫–∞—Ç–æ–≤ (–º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏): {total_duplicates_global}\n"
            f"–ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫: {final_count} (—Å —É—á—ë—Ç–æ–º –ª–∏–º–∏—Ç–∞ = {total_needed})"
        )
        with open(file_name, 'w') as file:
            file.write(msg)

        # logger.info(msg)
        self.after(0, lambda: messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", msg, parent=self))

    # ----------------- –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ö–û–õ-–í–£ –§–ê–ô–õ–û–í -----------------
    def set_progress(self, value, maximum):
        self.after(0, lambda: self._set_progress(value, maximum))

    def _set_progress(self, value, maximum):
        self.progress_bar["maximum"] = maximum
        self.progress_bar["value"] = value
        self.progress_label.config(text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤: {value}/{maximum}")

# --------------------------------------------------------------------------
#                         –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
# --------------------------------------------------------------------------
class MainApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è CSV (Parallel)")
        self.configure(bg="#121212")

        style = ttk.Style(self)
        style.theme_use("clam")
        style.configure("TFrame", background="#121212")
        style.configure("TLabel", background="#121212", foreground="cyan", font=("Courier", 12))
        style.configure("TButton", background="black", foreground="white", font=("Courier", 12, "bold"))
        style.map("TButton",
                  background=[("active", "#2d2d2d")],
                  foreground=[("active", "white")])

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ (–¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)
        all_folders = [folder for folder in get_links(BASE_URL) if folder.endswith('/')]

        # –î–≤–∞ "—ç–∫—Ä–∞–Ω–∞"
        self.download_frame = DownloadFrame(self, all_folders)
        self.normalize_frame = NormalizeFrame(self)

        # –ú–µ–Ω—é
        menubar = tk.Menu(self, background="black", foreground="white")
        self.config(menu=menubar)

        menu_functions = tk.Menu(menubar, tearoff=False, background="#2d2d2d", foreground="white")
        menu_functions.add_command(label="–°–∫–∞—á–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç", command=self.show_download)
        menu_functions.add_command(label="–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å CSV (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)", command=self.show_normalize)
        menubar.add_cascade(label="–ú–µ–Ω—é", menu=menu_functions)

        menu_file = tk.Menu(menubar, tearoff=False, background="#2d2d2d", foreground="white")
        menu_file.add_command(label="–í—ã—Ö–æ–¥", command=self.quit)
        menubar.add_cascade(label="–§–∞–π–ª", menu=menu_file)

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        self.download_frame.pack(fill="both", expand=True)
        self.normalize_frame.pack_forget()

    def show_download(self):
        self.normalize_frame.pack_forget()
        self.download_frame.pack(fill="both", expand=True)

    def show_normalize(self):
        self.download_frame.pack_forget()
        self.normalize_frame.pack(fill="both", expand=True)

if __name__ == "__main__":
    app = MainApp()
    app.mainloop()
