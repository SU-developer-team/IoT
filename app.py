import os
import csv
import random
import logging
import requests
import numpy as np
import pandas as pd
import tkinter as tk
import multiprocessing
from tkinter import ttk
from threading import Thread
from bs4 import BeautifulSoup
from ttkthemes import ThemedTk
import matplotlib.pyplot as plt
from tkinter import ttk, messagebox, filedialog
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from concurrent.futures import ThreadPoolExecutor, as_completed

BASE_URL = "http://205.174.165.80/IOTDataset/CIC_IOT_Dataset2023/Dataset/CSV/CSV/"
SAVE_DIR = "downloads"
os.makedirs(SAVE_DIR, exist_ok=True)

LOG_DIR = "logs/app/"
os.makedirs(LOG_DIR, exist_ok=True)

logger = logging.getLogger("processing_logger")
logger.setLevel(logging.DEBUG)
fh = logging.FileHandler(os.path.join(LOG_DIR, "processing.log"), mode="w", encoding="utf-8")
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
fh.setFormatter(formatter)
logger.addHandler(fh)


def get_links(url):
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ (href) —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    response = requests.get(url)
    soup = BeautifulSoup(response.text, "html.parser")
    return [a["href"] for a in soup.find_all("a", href=True)]


def download_file(file_url, file_path):
    """–°–∫–∞—á–∏–≤–∞–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª –ø–æ URL –≤ file_path (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)."""
    if os.path.exists(file_path):
        print(f"üîµ –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {file_path}")
        return
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    try:
        with requests.get(file_url, stream=True) as r:
            r.raise_for_status()
            with open(file_path, "wb") as f:
                for chunk in r.iter_content(chunk_size=8192):
                    f.write(chunk)
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω: {file_path}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_url}: {e}")


def collect_csv_files(remote_url, local_subpath):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ .csv —Ñ–∞–π–ª—ã –∏–∑ —É–¥–∞–ª—ë–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    files = []
    items = get_links(remote_url)
    for item in items:
        if item.endswith('/'):
            new_remote = remote_url + item
            new_local = os.path.join(local_subpath, item.rstrip('/'))
            files.extend(collect_csv_files(new_remote, new_local))
        elif item.endswith('.csv'):
            remote_file = remote_url + item
            local_file = os.path.join(local_subpath, item)
            files.append((remote_file, local_file))
    return files


# ------------------------------------------------
# –§—Ä–µ–π–º –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
# ------------------------------------------------
class DownloadFrame(ttk.Frame):
    def __init__(self, master, all_folders):
        super().__init__(master, padding=10)
        self.all_folders = all_folders
        self.folder_vars = {}
        self.create_widgets()

    def create_widgets(self):
        style = ttk.Style(self)
        style.configure("TFrame", background="#fafafa")
        style.configure("TLabel", background="#fafafa", foreground="#000", font=("Courier", 12))
        style.configure("TCheckbutton", background="#fafafa", foreground="#000", font=("Courier", 11))
        style.configure("TButton",
                        background="#fafafa",
                        foreground="#000",
                        font=("Courier", 12, "bold"))
        style.map("TButton",
                  background=[("active", "#2d2d2d")],
                  foreground=[("active", "#000")])
        style.configure("Horizontal.TProgressbar",
                        troughcolor="#fafafa",
                        bordercolor="#fafafa",
                        background="#000",
                        lightcolor="#000",
                        darkcolor="#000")
        style.configure("Vertical.TScrollbar", troughcolor="#fafafa", background="#dfdfdf")

        title_label = ttk.Label(self, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", font=("Courier", 14, "bold"))
        title_label.pack(pady=5)

        self.status_label = ttk.Label(self, text=f"–î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–ø–æ–∫: {len(self.all_folders)} | –í—ã–±—Ä–∞–Ω–æ: 0")
        self.status_label.pack(pady=5)

        checkboxes_frame = ttk.Frame(self)
        checkboxes_frame.pack(fill="both", expand=True, pady=5)

        canvas_bg_color = "#fafafa"
        self.canvas = tk.Canvas(checkboxes_frame, bg=canvas_bg_color, highlightthickness=0)
        self.scrollbar = ttk.Scrollbar(checkboxes_frame, orient="vertical",
                                       command=self.canvas.yview, style="Vertical.TScrollbar")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)
        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")

        scrollable_frame = ttk.Frame(self.canvas, style="TFrame")
        self.canvas_window = self.canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")

        def on_frame_configure(event):
            self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        scrollable_frame.bind("<Configure>", on_frame_configure)

        for folder in self.all_folders:
            var = tk.BooleanVar()
            cb = ttk.Checkbutton(scrollable_frame, text=folder, variable=var, command=self.update_count)
            cb.pack(anchor="w")
            self.folder_vars[folder] = var

        self.progress_bar = ttk.Progressbar(self, mode="determinate", length=400, style="Horizontal.TProgressbar")
        self.progress_bar.pack(pady=5)

        self.progress_label = ttk.Label(self, text="–ü—Ä–æ–≥—Ä–µ—Å—Å: 0/0 (0%)")
        self.progress_label.pack(pady=5)

        download_btn = ttk.Button(
            self,
            text="–°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ",
            command=self.start_download,
            style="TButton"
        )
        download_btn.pack(pady=5)

    def update_count(self):
        selected_count = sum(var.get() for var in self.folder_vars.values())
        self.status_label.config(text=f"–î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–ø–æ–∫: {len(self.all_folders)} | –í—ã–±—Ä–∞–Ω–æ: {selected_count}")

    def start_download(self):
        selected_folders = [folder for folder, var in self.folder_vars.items() if var.get()]
        if not selected_folders:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!", parent=self)
            return
        messagebox.showinfo("–ó–∞–≥—Ä—É–∑–∫–∞",
                            f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ {len(selected_folders)} –ø–∞–ø–æ–∫ –Ω–∞—á–∞–ª–æ—Å—å.\n"
                            "–°–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",
                            parent=self)
        thread = Thread(target=self.download_thread, args=(selected_folders,), daemon=True)
        thread.start()

    def download_thread(self, selected_folders):
        all_files = []
        for folder in selected_folders:
            remote_url = BASE_URL + folder
            local_subpath = os.path.join(SAVE_DIR, folder.rstrip('/'))
            files_in_folder = collect_csv_files(remote_url, local_subpath)
            all_files.extend(files_in_folder)

        total_files = len(all_files)
        if total_files == 0:
            self.after(0, lambda: messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç",
                                                      "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ CSV-—Ñ–∞–π–ª–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö.",
                                                      parent=self))
            return

        def update_progress(i):
            percent = int((i / total_files) * 100)
            self.progress_bar["value"] = i
            self.progress_label.config(text=f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total_files} ({percent}%)")

        self.after(0, lambda: self.progress_bar.config(value=0, maximum=total_files))
        self.after(0, lambda: self.progress_label.config(text=f"–ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{total_files} (0%)"))

        completed_count = 0
        with ThreadPoolExecutor(max_workers=5) as executor:
            future_to_file = {
                executor.submit(download_file, file_url, file_path): (file_url, file_path)
                for file_url, file_path in all_files
            }
            for future in as_completed(future_to_file):
                completed_count += 1
                self.after(0, lambda c=completed_count: update_progress(c))

        def finish_message():
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ!", "–í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!", parent=self)
            self.status_label.config(text="–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        self.after(0, finish_message)


# ----------------------------------------------------------------------
# –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–î–ï–õ–¨–ù–û–ì–û –§–ê–ô–õ–ê
# ----------------------------------------------------------------------
def process_file(fpath: str, remove_incomplete: bool, remove_dup: bool):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ (multiprocessing).
    –ü–æ—Å—Ç—Ä–æ—á–Ω–æ —á–∏—Ç–∞–µ—Ç –æ–¥–∏–Ω CSV-—Ñ–∞–π–ª:
      - remove_incomplete: –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏
      - remove_dup: –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å –≤ —Ñ–∞–π–ª–µ
    –õ–æ–≥–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π –ø—Ä–æ–ø—É—Å–∫.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (rows, incomplete_count, duplicates_count, header)
    """
    rows = []
    seen = set()
    incomplete_count = 0
    duplicates_count = 0
    header = None

    try:
        with open(fpath, "r", encoding="utf-8", newline="") as f:
            reader = csv.reader(f)
            row_index = 0
            for row in reader:
                row_index += 1
                if row_index == 1:
                    header = row
                    continue

                if remove_incomplete and any(col.strip() == "" for col in row):
                    logger.info(f"[–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞] File='{fpath}', Line={row_index}, Data={row}")
                    incomplete_count += 1
                    continue

                row_tuple = tuple(row)
                if remove_dup and (row_tuple in seen):
                    logger.info(f"[–î—É–±–ª–∏–∫–∞—Ç] File='{fpath}', Line={row_index}, Data={row}")
                    duplicates_count += 1
                    continue

                rows.append(row)
                if remove_dup:
                    seen.add(row_tuple)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {fpath}: {e}")

    return rows, incomplete_count, duplicates_count, header


# ----------------------------------------------------------------------
# –§–£–ù–ö–¶–ò–Ø –ö–û–†–†–ï–ö–¶–ò–ò –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–• –ò \pm INF
# ----------------------------------------------------------------------
def fix_negatives_and_infs(df: pd.DataFrame):
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ ¬±inf –≤ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö:
    - –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ -> –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    - +inf -> –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ max_finite
    - -inf -> –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ min_finite
    """
    for col in df.select_dtypes(include=[np.number]).columns:
        finite_values = df[col].replace([np.inf, -np.inf], np.nan).dropna()
        if finite_values.empty:
            logger.warning(f"–°—Ç–æ–ª–±–µ—Ü '{col}' —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ/–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        min_positive = finite_values[finite_values > 0].min() if any(finite_values > 0) else None
        max_finite = finite_values.max()
        min_finite = finite_values.min()

        if min_positive:
            df.loc[df[col] < 0, col] = min_positive
        df.loc[df[col] == np.inf, col] = max_finite
        df.loc[df[col] == -np.inf, col] = min_finite


# ---------------------------------------------------------------------
# NormalizeFrame: –ª–æ–≥–∏–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏/–ª–æ–≥–∞—Ä–∏—Ñ–º–∞/–º–∏–Ω–º–∞–∫—Å
# ---------------------------------------------------------------------
class NormalizeFrame(ttk.Frame):
    def __init__(self, master):
        super().__init__(master, padding=10)
        self.file_list = []

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.var_total_lines = tk.StringVar(value="1000000")
        self.var_label = tk.StringVar(value="")
        self.var_shuffle = tk.BooleanVar(value=False)
        self.var_remove_dup = tk.BooleanVar(value=False)
        self.var_remove_incomplete = tk.BooleanVar(value=False)
        self.var_fix_inf = tk.BooleanVar(value=False)    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ
        self.var_do_log = tk.BooleanVar(value=False)     # –õ–æ–≥–∞—Ä–∏—Ñ–º
        self.var_do_minmax = tk.BooleanVar(value=False)  # Min-Max

        # –°–ø–∏—Å–æ–∫ —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ (–ø—Ä–∏ –ª–æ–≥–∞—Ä–∏—Ñ–º–µ)
        self.log_columns_vars = {}  # col_name -> tk.BooleanVar()

        self.create_widgets()

    def create_widgets(self):
        style = ttk.Style(self)
        style.configure("TFrame", background="#fafafa")
        style.configure("TLabel", background="#fafafa", foreground="#000", font=("Courier", 12))
        style.configure("TCheckbutton", background="#fafafa", foreground="#000", font=("Courier", 11))
        style.configure("TButton", background="#fafafa", foreground="#000", font=("Courier", 12, "bold"))
        style.map("TButton",
                  background=[("active", "#fafafa")],
                  foreground=[("active", "#000")])
        style.configure("Vertical.TScrollbar", troughcolor="#1E1E1E", background="#dfdfdf")

        lbl_title = ttk.Label(self, text="–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å (–æ–±—ä–µ–¥–∏–Ω–∏—Ç—å) CSV-—Ñ–∞–π–ª—ã (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)", font=("Courier", 14, "bold"))
        lbl_title.pack(pady=5)

        # –ö–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å" –∏ "–û—á–∏—Å—Ç–∏—Ç—å"
        top_frame = ttk.Frame(self)
        top_frame.pack(fill="x")
        btn_add = ttk.Button(top_frame, text="–î–æ–±–∞–≤–∏—Ç—å CSV-—Ñ–∞–π–ª—ã", command=self.add_files, style="TButton")
        btn_add.pack(side="left", padx=5, pady=5)
        btn_clear = ttk.Button(top_frame, text="–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", command=self.clear_file_list, style="TButton")
        btn_clear.pack(side="left", padx=5, pady=5)

        # Listbox —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.listbox = tk.Listbox(self, bg="#dfdfdf", fg="#000", selectbackground="#2d2d2d", height=10)
        self.listbox.pack(fill="both", expand=True, padx=5, pady=5)

        # –§—Ä–µ–π–º –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params_frame = ttk.Frame(self)
        params_frame.pack(fill="x", pady=5)

        row_idx = 0
        ttk.Label(params_frame, text="–ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫:").grid(row=row_idx, column=0, sticky="w", padx=5)
        entry_total = ttk.Entry(params_frame, textvariable=self.var_total_lines, width=10)
        entry_total.grid(row=row_idx, column=1, sticky="w", padx=5)

        row_idx += 1
        ttk.Label(params_frame, text="–ú–µ—Ç–∫–∞ (label):").grid(row=row_idx, column=0, sticky="w", padx=5)
        entry_label = ttk.Entry(params_frame, textvariable=self.var_label, width=10)
        entry_label.grid(row=row_idx, column=1, sticky="w", padx=5)

        row_idx += 1
        chk_shuffle = ttk.Checkbutton(params_frame, text="–°–º–µ—à–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ (shuffle)", variable=self.var_shuffle)
        chk_shuffle.grid(row=row_idx, column=0, columnspan=2, sticky="w", padx=5, pady=3)

        row_idx += 1
        chk_dup = ttk.Checkbutton(params_frame, text="–£–¥–∞–ª—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã (–º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏)", variable=self.var_remove_dup)
        chk_dup.grid(row=row_idx, column=0, columnspan=2, sticky="w", padx=5, pady=3)

        row_idx += 1
        chk_inc = ttk.Checkbutton(params_frame, text="–£–¥–∞–ª—è—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–ø—É—Å—Ç—ã–µ –ø–æ–ª—è)",
                                  variable=self.var_remove_incomplete)
        chk_inc.grid(row=row_idx, column=0, columnspan=2, sticky="w", padx=5, pady=3)

        # row_idx += 1
        # chk_inf = ttk.Checkbutton(params_frame, text="–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏ ¬±inf", variable=self.var_fix_inf)
        # chk_inf.grid(row=row_idx, column=0, columnspan=2, sticky="w", padx=5, pady=3)

        # row_idx += 1
        # chk_log = ttk.Checkbutton(params_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ª–æ–≥–∞—Ä–∏—Ñ–º (–≤—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã)", variable=self.var_do_log,
        #                           command=self.on_log_checkbox)
        # chk_log.grid(row=row_idx, column=0, columnspan=2, sticky="w", padx=5, pady=3)

        # row_idx += 1
        # chk_mm = ttk.Checkbutton(params_frame, text="Min-Max –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è", variable=self.var_do_minmax)
        # chk_mm.grid(row=row_idx, column=0, columnspan=2, sticky="w", padx=5, pady=3)

        # –§—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ (–ª–æ–≥–∞—Ä–∏—Ñ–º)
        lbl_log_cols = ttk.Label(self, text="–õ–æ–≥–∞—Ä–∏—Ñ–º: –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã (–∫—Ä–æ–º–µ label):")
        lbl_log_cols.pack(pady=5)
        self.log_cols_frame = ttk.Frame(self)
        self.log_cols_frame.pack(fill="both", expand=True, padx=5, pady=3)

        self.canvas_scroll = tk.Canvas(self.log_cols_frame, bg="#fafafa", highlightthickness=0)
        scrollbar = ttk.Scrollbar(self.log_cols_frame, orient="vertical", command=self.canvas_scroll.yview)
        self.canvas_scroll.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side="right", fill="y")
        self.canvas_scroll.pack(side="left", fill="both", expand=True)

        self.checkboxes_frame = ttk.Frame(self.canvas_scroll, style="TFrame")
        self.canvas_window = self.canvas_scroll.create_window((0, 0), window=self.checkboxes_frame, anchor="nw")

        def on_frame_configure(event):
            self.canvas_scroll.configure(scrollregion=self.canvas_scroll.bbox("all"))
        self.checkboxes_frame.bind("<Configure>", on_frame_configure)

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ (–ø–æ–∫–∞ —á–µ–∫–±–æ–∫—Å –õ–æ–≥–∞—Ä–∏—Ñ–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω)
        self.log_cols_frame.pack_forget()

        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_bar = ttk.Progressbar(self, mode="determinate", length=400, style="Horizontal.TProgressbar")
        self.progress_bar.pack(pady=5)
        self.progress_label = ttk.Label(self, text="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤: 0/0")
        self.progress_label.pack(pady=5)

        # –ö–Ω–æ–ø–∫–∞ "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å"
        merge_btn = ttk.Button(self, text="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.start_normalize, style="TButton")
        merge_btn.pack(pady=5, anchor="e")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSV
    def add_files(self):
        file_paths = filedialog.askopenfilenames(
            title="–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª—ã",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        if file_paths:
            for f in file_paths:
                if f not in self.file_list:
                    self.file_list.append(f)
                    self.listbox.insert("end", f)
            # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ª–æ–≥–∞—Ä–∏—Ñ–º–∞
            self.show_log_column_selection()

    # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
    def clear_file_list(self):
        self.file_list.clear()
        self.listbox.delete(0, "end")
        self.log_columns_vars = {}
        for widget in self.checkboxes_frame.winfo_children():
            widget.destroy()

    # –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–≤–∏—Ç/—É–±–∏—Ä–∞–µ—Ç –≥–∞–ª–æ—á–∫—É "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ª–æ–≥–∞—Ä–∏—Ñ–º"
    def on_log_checkbox(self):
        if self.var_do_log.get():
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ—Ä–µ–π–º —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–æ–ª–±—Ü–æ–≤
            self.log_cols_frame.pack(fill="both", expand=True, padx=5, pady=3)
            self.show_log_column_selection()
        else:
            # –°–ø—Ä—è—Ç–∞—Ç—å —Ñ—Ä–µ–π–º, –æ—á–∏—Å—Ç–∏—Ç—å —á–µ–∫–±–æ–∫—Å—ã
            self.log_cols_frame.pack_forget()
            self.log_columns_vars = {}
            for widget in self.checkboxes_frame.winfo_children():
                widget.destroy()

    # –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ, –∫—Ä–æ–º–µ label)
    def show_log_column_selection(self):
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —á–µ–∫–±–æ–∫—Å—ã
        for widget in self.checkboxes_frame.winfo_children():
            widget.destroy()
        self.log_columns_vars = {}

        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ -> –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if not self.file_list or not self.var_do_log.get():
            return

        # –°—á–∏—Ç—ã–≤–∞–µ–º –ü–ï–†–í–´–ô —Ñ–∞–π–ª (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞) —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã
        try:
            sample_df = pd.read_csv(self.file_list[0])
            numeric_cols = sample_df.select_dtypes(include=[np.number]).columns
            # –ò—Å–∫–ª—é—á–∞–µ–º label
            if "label" in numeric_cols:
                numeric_cols = numeric_cols.drop("label")

            for col_name in numeric_cols:
                var = tk.BooleanVar()
                cb = ttk.Checkbutton(self.checkboxes_frame, text=col_name, variable=var)
                cb.pack(anchor="w")
                self.log_columns_vars[col_name] = var

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}", parent=self)

    # –ù–∞—á–∞–ª–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    def start_normalize(self):
        if not self.file_list:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω CSV-—Ñ–∞–π–ª!", parent=self)
            return

        out_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π CSV",
            defaultextension=".csv",
            filetypes=[("CSV File", "*.csv"), ("All Files", "*.*")]
        )
        if not out_path:
            return

        try:
            total_needed = int(self.var_total_lines.get())
            if total_needed < 1:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ß–∏—Å–ª–æ –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0!", parent=self)
                return
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫!", parent=self)
            return

        thread = Thread(target=self.normalize_thread, args=(out_path, total_needed), daemon=True)
        thread.start()

    def normalize_thread(self, out_path, total_needed):
        do_shuffle = self.var_shuffle.get()
        do_remove_dup = self.var_remove_dup.get()
        do_remove_incomplete = self.var_remove_incomplete.get()
        do_fix_inf = self.var_fix_inf.get()
        do_log = self.var_do_log.get()
        do_minmax = self.var_do_minmax.get()
        label_value = self.var_label.get().strip()

        n_files = len(self.file_list)
        self.set_progress(0, n_files)

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —á–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        try:
            with multiprocessing.Pool() as pool:
                async_result = pool.starmap_async(
                    process_file,
                    [(fpath, do_remove_incomplete, do_remove_dup) for fpath in self.file_list]
                )
                final_list = async_result.get()
        except Exception as e:
            msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}"
            logger.error(msg)
            self.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", msg, parent=self))
            return

        self.set_progress(n_files, n_files)

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        all_rows = []
        total_incomplete = 0
        total_duplicates_local = 0
        headers = []
        for (rows, inc_count, dup_count, header) in final_list:
            if header:
                headers.append(header)
            total_incomplete += inc_count
            total_duplicates_local += dup_count
            all_rows.extend(rows)

        main_header = headers[0] if headers else None
        # –î—É–±–ª–∏–∫–∞—Ç—ã –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
        total_duplicates_global = 0
        if do_remove_dup:
            global_seen = set()
            unique_rows = []
            for row in all_rows:
                rt = tuple(row)
                if rt in global_seen:
                    total_duplicates_global += 1
                    continue
                unique_rows.append(row)
                global_seen.add(rt)
            all_rows = unique_rows

        if len(all_rows) > total_needed:
            all_rows = random.sample(all_rows, total_needed)

        if do_shuffle:
            random.shuffle(all_rows)

        if not main_header and all_rows:
            col_count = len(all_rows[0])
            main_header = [f"col{i+1}" for i in range(col_count)]
        elif not main_header:
            main_header = []

        if not all_rows:
            msg = "–í –∏—Ç–æ–≥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."
            self.after(0, lambda: messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", msg, parent=self))
            return

        df = pd.DataFrame(all_rows, columns=main_header)

        # label, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if label_value:
            df["label"] = label_value

        # 1) –ö–æ—Ä—Ä–µ–∫—Ü–∏—è ¬±inf, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö
        if do_fix_inf:
            try:
                fix_negatives_and_infs(df)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ fix_negatives_and_infs: {e}")

        # 2) –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        if do_log:
            chosen_cols = [col for col, var in self.log_columns_vars.items() if var.get()]
            for c in chosen_cols:
                if c in df.columns:
                    df[c] = pd.to_numeric(df[c], errors="coerce")
                    # log1p -> log(1 + x), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å log(0)
                    try:
                        df[c] = np.log1p(df[c])
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∞—Ä–∏—Ñ–º–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ '{c}': {e}")

        # 3) Min-Max –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if do_minmax:
            numeric_cols = df.select_dtypes(include=[np.number]).columns
            for c in numeric_cols:
                if c == "label":
                    continue
                c_min = df[c].min()
                c_max = df[c].max()
                if c_max - c_min != 0:
                    df[c] = (df[c] - c_min) / (c_max - c_min)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        try:
            df.to_csv(out_path, index=False)
        except Exception as e:
            msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª: {e}"
            logger.error(msg)
            self.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", msg, parent=self))
            return

        final_count = len(df)

        # –í—ã–≤–æ–¥–∏–º –æ–∫–Ω–æ —Å min/max –≤—Å–µ—Ö —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        def show_min_max_window():
            numeric_cols = df.select_dtypes(include=[np.number]).columns
            msg_list = []
            for c in numeric_cols:
                col_min = df[c].min()
                col_max = df[c].max()
                msg_list.append(f"{c}: min={col_min}, max={col_max}")
            window = tk.Toplevel(self)
            window.title("Min/Max –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
            tk.Label(window, text="Min/Max –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤:", font=("Courier", 12, "bold")).pack(pady=5)
            for line in msg_list:
                tk.Label(window, text=line, font=("Courier", 11)).pack(anchor="w", padx=10)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–ª–æ–≥)
        info_msg = (
            f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {out_path}\n"
            f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(self.file_list)}\n"
            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {total_incomplete}\n"
            f"–î—É–±–ª–∏–∫–∞—Ç–æ–≤ (–≤–Ω—É—Ç—Ä–∏): {total_duplicates_local}\n"
            f"–î—É–±–ª–∏–∫–∞—Ç–æ–≤ (–º–µ–∂–¥—É): {total_duplicates_global}\n"
            f"–ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫: {final_count}\n"
            f"–ö–æ—Ä—Ä–µ–∫—Ü–∏—è inf/neg: {'–î–∞' if do_fix_inf else '–ù–µ—Ç'}\n"
            f"–õ–æ–≥–∞—Ä–∏—Ñ–º: {', '.join([c for c,v in self.log_columns_vars.items() if v.get()]) if do_log else '–ù–µ—Ç'}\n"
            f"Min-Max: {'–î–∞' if do_minmax else '–ù–µ—Ç'}\n"
        )

        # –ü–∏—à–µ–º –≤ –ª–æ–≥-—Ñ–∞–π–ª
        file_log_name = os.path.basename(out_path).replace(".csv", "") + ".log"
        file_log_path = os.path.join(LOG_DIR, file_log_name)
        with open(file_log_path, "w", encoding="utf-8") as logf:
            logf.write(info_msg)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        self.after(0, lambda: messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", info_msg, parent=self))
        self.after(0, show_min_max_window)

    def set_progress(self, value, maximum):
        self.after(0, lambda: self._set_progress(value, maximum))

    def _set_progress(self, value, maximum):
        self.progress_bar["maximum"] = maximum
        self.progress_bar["value"] = value
        self.progress_label.config(text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤: {value}/{maximum}")


# --------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ê–Ω–∞–ª–∏–∑": –≤—ã–≤–æ–¥–∏—Ç min/max –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
# --------------------------------------------------------------------
def find_min_max_for_selected_columns(df: pd.DataFrame):
    numeric_columns = df.select_dtypes(include=['number']).columns
    results = []
    for column in numeric_columns:
        min_value = df[column].min()
        max_value = df[column].max()
        results.append({"Column": column, "Min": min_value, "Max": max_value})
    return pd.DataFrame(results)


# --------------------------------------------------------------------
# AnalyzeFrame ‚Äî –≤–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (–≥—Ä–∞—Ñ–∏–∫–∏)
# --------------------------------------------------------------------
class AnalyzeFrame(ttk.Frame):
    def __init__(self, master):
        super().__init__(master, padding=10)
        self.file_path = None
        self.df = None
        self.column_vars = {}
        self.canvas = None
        self.select_all_button = None
        self.plot_button = None
        self.min_max_button = None
        self.save_graph_button = None
        self.create_widgets()

    def create_widgets(self):
        style = ttk.Style(self)
        style.configure("TFrame", background="#fafafa")
        style.configure("TLabel", background="#fafafa", foreground="#000", font=("Courier", 12))
        style.configure("TButton", background="#fafafa", foreground="#000", font=("Courier", 12, "bold"))
        style.map("TButton",
                  background=[("active", "#fafafa")],
                  foreground=[("active", "#000")])
        style.configure("Horizontal.TProgressbar", troughcolor="#fafafa", background="#000", thickness=25)
        style.configure("Vertical.TScrollbar", troughcolor="#fafafa", background="#000")

        lbl_title = ttk.Label(self, text="–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö CSV", font=("Courier", 14, "bold"))
        lbl_title.pack(pady=5)

        btn_add = ttk.Button(self, text="–í—ã–±—Ä–∞—Ç—å CSV-—Ñ–∞–π–ª", command=self.select_file, style="TButton")
        btn_add.pack(pady=5)

        self.progress_bar = ttk.Progressbar(self, mode="determinate", length=400, style="Horizontal.TProgressbar")
        self.progress_bar.pack(pady=5)

        self.progress_label = ttk.Label(self, text="–û–∂–∏–¥–∞–Ω–∏–µ...")
        self.progress_label.pack(pady=5)

        center_frame = ttk.Frame(self)
        center_frame.pack(fill="both", expand=True, pady=5)

        self.canvas_scroll = tk.Canvas(center_frame, bg="#fafafa", highlightthickness=0)
        self.scrollbar = ttk.Scrollbar(center_frame, orient="vertical", command=self.canvas_scroll.yview)
        self.canvas_scroll.configure(yscrollcommand=self.scrollbar.set)
        self.scrollbar.pack(side="right", fill="y")
        self.canvas_scroll.pack(side="left", fill="both", expand=True)

        self.checkboxes_frame = ttk.Frame(self.canvas_scroll, style="TFrame")
        self.canvas_window = self.canvas_scroll.create_window((0, 0), window=self.checkboxes_frame, anchor="nw")

        def on_frame_configure(event):
            self.canvas_scroll.configure(scrollregion=self.canvas_scroll.bbox("all"))
        self.checkboxes_frame.bind("<Configure>", on_frame_configure)

        self.graph_frame = ttk.Frame(self)
        self.graph_frame.pack(fill="both", expand=True, pady=5)

    def select_file(self):
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        if file_path:
            self.file_path = file_path
            self.progress_label.config(text=f"–§–∞–π–ª –≤—ã–±—Ä–∞–Ω: {os.path.basename(file_path)}")
            self.load_columns()

    def load_columns(self):
        try:
            self.df = pd.read_csv(self.file_path)
            numeric_columns = self.df.select_dtypes(include=['number']).columns

            for widget in self.checkboxes_frame.winfo_children():
                widget.destroy()

            if self.select_all_button:
                self.select_all_button.destroy()

            # –†–∞–∑–¥–µ–ª–∏–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–æ–∫
            num_columns = 3
            column_frames = []
            for i in range(num_columns):
                frame = ttk.Frame(self.checkboxes_frame)
                frame.grid(row=0, column=i, sticky="nsew", padx=5)
                column_frames.append(frame)

            self.column_vars = {}
            idx = 0
            for column in numeric_columns:
                var = tk.BooleanVar()
                cb = ttk.Checkbutton(column_frames[idx % num_columns], text=column, variable=var,
                                     command=self.update_buttons_state)
                cb.pack(anchor="w")
                self.column_vars[column] = var
                idx += 1

            # –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
            self.select_all_button = ttk.Button(
                self.checkboxes_frame,
                text="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
                command=self.select_all_columns,
                style="TButton"
            )
            self.select_all_button.grid(row=1, column=0, columnspan=num_columns, pady=5)

            self.create_action_buttons()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: {e}", parent=self)

    def create_action_buttons(self):
        if self.plot_button:
            self.plot_button.destroy()
        if self.min_max_button:
            self.min_max_button.destroy()

        self.plot_button = ttk.Button(
            self,
            text="–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫",
            command=self.start_analysis,
            style="TButton",
            state="disabled"
        )
        self.plot_button.pack(pady=5)

        self.min_max_button = ttk.Button(
            self,
            text="–ù–∞–π—Ç–∏ –º–∏–Ω–∏–º—É–º/–º–∞–∫—Å–∏–º—É–º",
            command=self.find_min_max,
            style="TButton",
            state="disabled"
        )
        self.min_max_button.pack(pady=5)

    def update_buttons_state(self):
        selected_columns = [col for col, var in self.column_vars.items() if var.get()]
        if selected_columns:
            self.plot_button.config(state="normal")
            self.min_max_button.config(state="normal")
        else:
            self.plot_button.config(state="disabled")
            self.min_max_button.config(state="disabled")

    def select_all_columns(self):
        new_state = not all(var.get() for var in self.column_vars.values())
        for var in self.column_vars.values():
            var.set(new_state)
        self.update_buttons_state()

    def start_analysis(self):
        if self.df is None:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª!", parent=self)
            return
        selected_columns = [col for col, var in self.column_vars.items() if var.get()]
        if not selected_columns:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!", parent=self)
            return
        if len(selected_columns) > 5:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞!", parent=self)
            return

        if hasattr(self, "canvas") and self.canvas:
            self.canvas.get_tk_widget().destroy()

        fig, ax = plt.subplots(figsize=(8, 4))
        for column in selected_columns:
            x_values = range(1, len(self.df) + 1)
            y_values = self.df[column].tolist()
            ax.plot(x_values, y_values, marker="o", linestyle="-", markersize=2, label=column)

        ax.set_xlabel("–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏")
        ax.set_ylabel("–ó–Ω–∞—á–µ–Ω–∏—è")
        ax.set_title("–ì—Ä–∞—Ñ–∏–∫ –∑–Ω–∞—á–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤")
        ax.legend()
        ax.grid(True)

        self.canvas = FigureCanvasTkAgg(fig, master=self.graph_frame)
        self.canvas.draw()
        self.canvas.get_tk_widget().pack(fill="both", expand=True)

        if not self.save_graph_button:
            self.save_graph_button = ttk.Button(
                self,
                text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫",
                command=self.save_graph,
                style="TButton"
            )
            self.save_graph_button.pack(pady=5)

    def find_min_max(self):
        selected_columns = [col for col, var in self.column_vars.items() if var.get()]
        if not selected_columns:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É!", parent=self)
            return
        result_df = find_min_max_for_selected_columns(self.df[selected_columns])
        # –ü–æ–∫–∞–∂–µ–º –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        window = tk.Toplevel(self)
        window.title("Min/Max –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤")
        tk.Label(window, text="–†–µ–∑—É–ª—å—Ç–∞—Ç:", font=("Courier", 12, "bold")).pack(pady=5)
        for idx, row in result_df.iterrows():
            line = f"{row['Column']}: min={row['Min']}, max={row['Max']}"
            tk.Label(window, text=line, font=("Courier", 11)).pack(anchor="w", padx=10)

    def save_graph(self):
        if not self.canvas:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ì—Ä–∞—Ñ–∏–∫ –µ—â—ë –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω!", parent=self)
            return
        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫",
            defaultextension=".png",
            filetypes=[("PNG files", "*.png"), ("All files", "*.*")]
        )
        if file_path:
            self.canvas.figure.savefig(file_path)
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ!", f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path}", parent=self)


# ---------------------------------------------------------------------
# –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ---------------------------------------------------------------------
class MainApp(ThemedTk):
    def __init__(self):
        super().__init__()
        self.set_theme("arc")
        self.title("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è CSV (Parallel)")
        self.geometry("900x700")
        self.configure(background="#fafafa")

        style = ttk.Style()
        style.configure('TFrame', background='#fafafa')
        style.configure('TLabel', background='#fafafa', foreground='#000', font=('Segoe UI', 10))
        style.configure('TButton', background='#fafafa', foreground='#000', font=('Segoe UI', 10, 'bold'))
        style.map('TButton',
                  background=[('active', '#fafafa')],
                  foreground=[('active', '#000')])
        style.configure('TCheckbutton', background='#fafafa', foreground='#000', font=('Segoe UI', 10))
        style.configure('Horizontal.TProgressbar', troughcolor='#fafafa', background='#000', thickness=25)
        style.configure('Vertical.TScrollbar', troughcolor='#fafafa', background='#000')

        all_folders = [folder for folder in get_links(BASE_URL) if folder.endswith('/')]

        self.download_frame = DownloadFrame(self, all_folders)
        self.normalize_frame = NormalizeFrame(self)
        self.analyze_frame = AnalyzeFrame(self)

        menubar = tk.Menu(self, background="#fafafa", foreground="#000", font=('Segoe UI', 10))
        self.config(menu=menubar)

        menu_functions = tk.Menu(menubar, tearoff=False, background="#fafafa", foreground="#000", font=('Segoe UI', 10))
        menu_functions.add_command(label="–°–∫–∞—á–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç", command=self.show_download)
        menu_functions.add_command(label="–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç", command=self.show_normalize)
        menu_functions.add_command(label="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç", command=self.show_analyze)
        menu_functions.add_separator()
        menu_functions.add_command(label="–í—ã—Ö–æ–¥", command=self.quit)
        menubar.add_cascade(label="–ú–µ–Ω—é", menu=menu_functions)

        self.show_download()

    def show_download(self):
        self.normalize_frame.pack_forget()
        self.analyze_frame.pack_forget()
        self.download_frame.pack(fill="both", expand=True)

    def show_normalize(self):
        self.download_frame.pack_forget()
        self.analyze_frame.pack_forget()
        self.normalize_frame.pack(fill="both", expand=True)

    def show_analyze(self):
        self.download_frame.pack_forget()
        self.normalize_frame.pack_forget()
        self.analyze_frame.pack(fill="both", expand=True)


if __name__ == "__main__":
    app = MainApp()
    app.mainloop()
